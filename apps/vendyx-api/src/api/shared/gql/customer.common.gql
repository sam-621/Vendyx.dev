type Customer implements Node {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  firstName: String
  lastName: String!
  email: String!
  phoneNumber: String
  """
  to customer be able to login, place orders, etc. the customer must be enabled
  """
  enabled: Boolean!

  orders(input: OrderListInput): OrderList!
  addresses(input: ListInput): AddressList!
}

type CustomerList implements List {
  items: [Customer!]!
  count: Int!
  pageInfo: PageInfo!
}

" Results "
type CustomerResult {
  customer: Customer
  apiErrors: [CustomerErrorResult!]!
}

type CustomerErrorResult {
  code: CustomerErrorCode!
  message: String!
}

input OrderListInput {
  """
  Skip the first n results
  """
  skip: Int

  """
  takes n result from where the skip position is
  """
  take: Int

  """
  Filters to apply
  """
  filters: OrderFilters
}

input OrderFilters {
  code: String
}
