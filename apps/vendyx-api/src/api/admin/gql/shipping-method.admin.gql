"""
A shipping method is a method chosen by the customer to ship the order to the customer's address
"""
type ShippingMethod implements Node {
  id: ID!
  createdAt: Date!
  updatedAt: Date!

  """
  The shipping method's name (e.g. 'Stripe')
  """
  name: String!

  """
  The shipping method's description
  """
  description: String

  """
  Whether the shipping method is enabled or not
  Not enabled shipping methods will not be shown in the storefront
  Useful for shipping methods that are not ready to be used yet
  """
  enabled: Boolean!

  """
  Specific data for the shipping handler chosen
  Usually, this json stores the shipping integration keys
  Record<string, string | number | boolean>
  """
  args: JSON!

  code: String!

  pricePreview: Int!
}

"""
A shipping handler is a way to manage the shipping of an order in your shop, manage include the shipping cost, the shipping time, etc
"""
type ShippingHandler {
  """
  The shipping handler's name (e.g. 'Fedex')
  """
  name: String!

  """
  The shipping handler's code (e.g. 'fedex')
  """
  code: String!

  """
  The shipping handlers's icon
  """
  icon: String

  """
  Specific data for the shipping handler chosen
  Usually, this json stores the shipping integration keys
  Record<string, Arg>
  """
  args: JSON!
}

type Query {
  shippingMethods: [ShippingMethod!]!
  shippingHandlers: [ShippingHandler!]!
}

type Mutation {
  createShippingMethod(input: CreateShippingMethodInput!): ShippingMethodResult!
  updateShippingMethod(id: ID!, input: UpdateShippingMethodInput!): ShippingMethod!
  removeShippingMethod(id: ID!): Boolean!
}

input CreateShippingMethodInput {
  name: String!
  handler: ConfigurableProperty!
  zoneId: ID!
  description: String
  enabled: Boolean
}

input UpdateShippingMethodInput {
  name: String
  description: String
  enabled: Boolean
  """
  Specific data for the payment handler chosen
  Record<string, string | number | boolean>
  """
  args: JSON
}

type ShippingMethodResult {
  apiErrors: [ShippingMethodErrorResult!]!
  shippingMethod: ShippingMethod
}

type ShippingMethodErrorResult {
  code: ShippingMethodErrorCode!
  message: String!
}

enum ShippingMethodErrorCode {
  HANDLER_NOT_FOUND
}
