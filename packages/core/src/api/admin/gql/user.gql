type User {
  id: String!
  createdAt: String!
  updatedAt: String!
  deletedAt: String!
  """
  The user's email (unique)
  """
  email: String!

  """
  The user's shops
  """
  shops: ShopList!
}

type UserList implements List {
  items: [User!]!
  count: Int!
}

type Query {
  """
  Get a user by id
  """
  user(id: String!): User
}

type Mutation {
  """
  Create a new user
  """
  createUser(input: CreateUserInput!): UserResult!

  """
  Update a user
  """
  updateUser(userId: ID!, input: UpdateUserInput!): UserResult!
}

input CreateUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  email: String
}

type UserResult {
  user: User
  authToken: String
  apiErrors: [UserErrorResult!]!
}

type UserErrorResult {
  code: UserErrorCode!
  message: String!
}

enum UserErrorCode {
  INVALID_CREDENTIALS
  EMAIL_ALREADY_EXISTS
}
