type Mutation {
  """
  Create a new customer. 
  """
  createCustomer(input: CreateCustomerInput!): CustomerResult!
  """
  Update the customer's data.
  """
  updateCustomer(accessToken: String!, input: UpdateCustomerInput!): CustomerResult!
  """
  Update the customer's password providing the current password and the new password
  """
  updateCustomerPassword(accessToken: String!, input: UpdateCustomerPasswordInput!): CustomerResult!
  """
  Generate a token for the customer. This token is used to modify the customer's data.
  """
  generateCustomerAccessToken(email: String!, password: String!): GenerateCustomerAccessTokenResult!
  """
  Send an email to the customer with a link to reset the password. The link contains a token that is used to execute the recoverCustomerPassword mutation.
  """
  requestRecoveryCustomerPassword(email: String!): CustomerResult!
  """
  Change the customer's password with the token received from the request recovery password email
  """
  recoverCustomerPassword(urlToken: String!, password: String!): CustomerResult!
}

input UpdateCustomerPasswordInput {
  password: String!
  newPassword: String!
}

extend enum CustomerErrorCode {
  INVALID_ACCESS_TOKEN
  PASSWORDS_DO_NOT_MATCH
  INVALID_CREDENTIALS
  CUSTOMER_ALREADY_EXISTS
}

type GenerateCustomerAccessTokenResult {
  accessToken: String
  apiErrors: [CustomerErrorResult!]!
}