type Mutation {
  createOrder(input: CreateOrderInput): OrderResult!
  addLineToOrder(orderId: ID!, input: CreateOrderLineInput!): OrderResult!
  updateOrderLine(lineId: ID!, input: UpdateOrderLineInput!): OrderResult!
  removeOrderLine(lineId: ID!): OrderResult!
  addCustomerToOrder(orderId: ID!, input: CreateCustomerInput!): OrderResult!
  addShippingAddressToOrder(orderId: ID!, input: CreateAddressInput!): OrderResult!
  addPaymentToOrder(orderId: ID!, input: AddPaymentToOrderInput!): OrderResult!
  addShipmentToOrder(orderId: ID!, input: AddShipmentToOrderInput!): OrderResult!
}

input CreateOrderInput {
  line: CreateOrderLineInput
}

input CreateOrderLineInput {
  productVariantId: ID!
  quantity: Int!
}

input UpdateOrderLineInput {
  quantity: Int!
}

" Results "
type OrderResult {
  order: Order
  apiErrors: [OrderErrorResult!]!
}

type OrderErrorResult {
  code: OrderErrorCode!
  message: String!
}

" Utils "
enum OrderErrorCode {
  ORDER_NOT_FOUND
  LINE_NOT_FOUND
  ORDER_TRANSITION_ERROR
  NOT_ENOUGH_STOCK
  CUSTOMER_INVALID_EMAIL
  SHIPPING_METHOD_NOT_FOUND
  MISSING_SHIPPING_ADDRESS
  PAYMENT_METHOD_NOT_FOUND
  PAYMENT_DECLINED
}
