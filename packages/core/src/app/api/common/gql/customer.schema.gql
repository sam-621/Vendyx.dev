type Customer implements Node {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  firstName: String
  lastName: String!
  email: String!
  phoneNumber: String
  phoneCountryCode: String
  """
  to customer be able to login, place orders, etc. the customer must be enabled
  """
  enabled: Boolean!

  orders: [OrderList!]
  addresses: [AddressList!]
}

type CustomerList implements List {
  items: [Customer!]!
  count: Int!
}

type Query {
  customer(accessToken: String!): Customer
}

type Mutation {
  removeCustomer(id: ID!): CustomerResult!
}

input CreateCustomerInput {
  firstName: String
  lastName: String!
  email: String!
  password: String!
  phoneNumber: String
  phoneCountryCode: String
}

input UpdateCustomerInput {
  firstName: String
  lastName: String
  email: String
  phoneNumber: String
  phoneCountryCode: String
}

" Results "
type CustomerResult {
  customer: Customer
  apiErrors: [CustomerErrorResult!]!
}

type CustomerErrorResult {
  code: CustomerErrorCode!
  message: String!
}

" Utils "
enum CustomerErrorCode {
  INVALID_EMAIL
  CUSTOMER_NOT_FOUND
}