type Mutation {
  createVariant(productId: ID!, input: CreateVariantInput!): CreateVariantResult!
  updateVariant(id: ID!, input: UpdateVariantInput!): UpdateVariantResult!
  removeVariant(id: ID!): RemoveVariantResult!
}

input CreateVariantInput {
  sku: String!
  price: Float!
  stock: Int!
  published: Boolean!

  assetId: ID
  optionValuesIds: [ID!]
}

input UpdateVariantInput {
  sku: String
  price: Float
  stock: Int
  published: Boolean

  assetId: ID
  optionValuesIds: [ID!]
}

type CreateVariantResult implements VariantResult {
  variant: Variant
  apiErrors: [VariantErrorResult!]!
}

type UpdateVariantResult implements VariantResult {
  variant: Variant
  apiErrors: [VariantErrorResult!]!
}

type RemoveVariantResult {
  success: Boolean
  apiErrors: [VariantErrorResult!]!
}

type VariantErrorResult {
  code: VariantErrorCode!
  message: String!
}

" Utils "
enum VariantErrorCode {
  VARIANT_NOT_FOUND
  PRODUCT_NOT_FOUND
}

interface VariantResult {
  variant: Variant
  apiErrors: [VariantErrorResult!]!
}
