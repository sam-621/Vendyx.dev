
type Mutation {
  createProduct(input: CreateProductInput!): CreateProductResult!
  updateProduct(id: ID!, input: UpdateProductInput!): UpdateProductResult!
  removeProduct(id: ID!): RemoveProductResult!
}

" Inputs "
input CreateProductInput {
  name: String!
  slug: String!
  description: String
  published: Boolean!
  onlineOnly: Boolean!

  assetsIds: [ID!]
}

input UpdateProductInput {
  name: String
  slug: String
  description: String
  published: Boolean
  onlineOnly: Boolean

  assetsIds: [ID!]
}

" Results "
type CreateProductResult implements ProductResult {
  product: Product
  apiErrors: [ProductErrorResult!]!
}

type UpdateProductResult implements ProductResult {
  product: Product
  apiErrors: [ProductErrorResult!]!
}

type RemoveProductResult {
  success: Boolean
  apiErrors: [ProductErrorResult!]!
}

type ProductErrorResult {
  code: ProductErrorCode!
  message: String!
}

" Utils "
enum ProductErrorCode {
  PRODUCT_NOT_FOUND
  NO_ID_OR_SLUG_PROVIDED
  DUPLICATED_SLUG
  PRODUCT_HAS_VARIANTS
}

interface ProductResult {
  product: Product
  apiErrors: [ProductErrorResult!]!
}